// Sass Mixins
//
// Styleguide Sass.Mixins

// Font Mixins
//
// Styleguide Sass.Mixins.Fonts

// primary-font-loaded
//
// Selector wrapper to apply styles only when the primary font is loaded.
//
// Compatible in all browsers
//
// Weight: 10
//
// Styleguide Sass.Mixins.Fonts.PrimaryFontLoaded
@mixin primary-font-loaded {
  @at-root .html__font-loaded--primary #{&} {
    @content;
  }
}

// font-weight-light
//
// Light font weight with !important option
//
// Compatible in all browsers
//
// $important - boolean - whether to output !important or not
//
// Weight: 100
//
// Styleguide Sass.Mixins.Fonts.Font Weight Light
@mixin font-weight-light($important: false) {
  @if ($important) {
    font-weight: 300 !important;
  } @else {
    font-weight: 300;
  }
}

// font-weight-normal
//
// Normal font weight with !important option
//
// Compatible in all browsers
//
// $important - boolean - whether to output !important or not
//
// Weight: 110
//
// Styleguide Sass.Mixins.Fonts.Font Weight Normal
@mixin font-weight-normal($important: false) {
  @if ($important) {
    font-weight: 400 !important;
  } @else {
    font-weight: 400;
  }
}

// font-weight-semibold
//
// Semibold font weight with !important option
//
// Compatible in all browsers
//
// $important - boolean - whether to output !important or not
//
// Weight: 130
//
// Styleguide Sass.Mixins.Fonts.Font Weight Semibold
@mixin font-weight-semibold($important: false) {
  @if ($important) {
    font-weight: 600 !important;
  } @else {
    font-weight: 600;
  }
}

// font-weight-medium
//
// Semibold font weight with !important option
//
// Compatible in all browsers
//
// $important - boolean - whether to output !important or not
//
// Weight: 130
//
// Styleguide Sass.Mixins.Fonts.Font Weight Semibold
@mixin font-weight-medium($important: false) {
  @if ($important) {
    font-weight: 500 !important;
  } @else {
    font-weight: 500;
  }
}

@mixin font-weight-bold($important: false) {
  @if ($important) {
    font-weight: 700 !important;
  } @else {
    font-weight: 700;
  }
}
// Detect Mixins
//
// Mixins that can be used to wrap styles and apply them conditionally on
// browser or feature detection.
//
// Styleguide Sass.Mixins.Detect

// js-enabled
//
// Selector wrapper to apply styles only when JS is available.
//
// Styleguide Sass.Mixins.Detect.JSEnabled
@mixin js--enabled() {
  @at-root .html--js #{&} {
    @content;
  }
}

// js-disabled
//
// Selector wrapper to apply styles only when JS is not available.
//
// Styleguide Sass.Mixins.Detect.JSEnabled
@mixin js--disabled() {
  @at-root .html--no-js #{&} {
    @content;
  }
}

// ie10-and-up
//
// Selector wrapper to apply styles only when the browser is IE10 or IE11.
// Using this mixin in Sass lets us make the intent clear and separate the
// mechanics of browser detection.
//
// Needs to be tested on Edge.
//
// Styleguide Sass.Mixins.Detect.JSEnabled
@mixin ie10-and-up {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content
	}
}

// linear-gradient
//
// Linear Gradient Mixin supporting color, stops & angle with legacy support
// based on https://www.sitepoint.com/building-linear-gradient-mixin-sass/
//
// Styleguide Sass.Mixins.Linear Gradient

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient-bg($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}


@mixin flex-center-all {
  display: flex !important;
  align-content: center !important;
  align-items: center !important;
  justify-content: center !important;
}

@mixin debug {
  border: 1px solid red !important;
}

@mixin minimized-pillar {
  @at-root .c-ecosystem-pillar.is-minimized & {
    @content;
  }
}

@mixin active-pillar($sel: '') {
  @at-root .c-ecosystem-pillar.is-active#{$sel} & {
    @content;
  }
}

@mixin blog-meta {
  @extend %u-padding-bottom--xs;
  font-size: 16px;

  a {
    $lt-color: #f7822a;
    @include font-weight-bold;
    color: $lt-color;
  }

  .entry-date {
    display: inline-block;

    @include media('>phone') {
      &::before {
        $lt-color: #ced4dd;
        display: inline-block;
        margin-right: 4px;
        color: $lt-color;
        content: '|';
      }
    }
  }
}

@mixin checkmark-list {
  margin-left: 0;
  list-style: none;

  li {
    position: relative;
    margin: 0 0 10px 12px;
    padding-left: 45px;

    &::before {
      @include position(absolute, 4px null null 0);
      @include size(23px, 17px);
      display: block;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='23px' height='17px' viewBox='0 0 23 17'%3E%3Cg stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='checkmark' fill='%23FF6F00' fill-rule='nonzero'%3E%3Cpolygon points='8.086 17 0 8.718 2.033 6.777 8.086 12.764 20.321 0.442 22.333 2.752'%3E%3C/polygon%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
      content: '';
    }
  }
}
